// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array     = require("bs-platform/lib/js/array.js");
var Js_json     = require("bs-platform/lib/js/js_json.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function makeSuccessJson() {
  var json = { };
  json["success"] = true;
  return json;
}

function makeFailureJson(msg) {
  var json = { };
  json["error"] = msg;
  return json;
}

function getOpt(param) {
  var s = param[0];
  if (s) {
    return s[0];
  } else {
    return param[1];
  }
}

function getOptExc(param) {
  var s = param[0];
  if (s) {
    return s[0];
  } else {
    throw param[1];
  }
}

function getDictString(dict, key) {
  var match = dict[key];
  if (match !== undefined) {
    return Js_json.decodeString(match);
  } else {
    return /* None */0;
  }
}

function getDictNumber(dict, key) {
  var match = getDictString(dict, key);
  if (match) {
    return /* Some */[Caml_format.caml_float_of_string(match[0])];
  } else {
    return /* None */0;
  }
}

function getDictObject(dict, key) {
  var match = dict[key];
  if (match !== undefined) {
    return Js_json.decodeObject(match);
  } else {
    return /* None */0;
  }
}

function str(prim) {
  return prim;
}

var listToElement = $$Array.of_list;

function contains(param) {
  var q = param[1];
  var s = param[0];
  var ls = s.length;
  var lq = q.length;
  if (lq > ls) {
    return /* false */0;
  } else {
    var i = 0;
    var j = 0;
    while((i + j | 0) < ls && j < lq) {
      var sc = Caml_string.get(s, i + j | 0);
      var qc = Caml_string.get(q, j);
      if (sc === qc) {
        j = j + 1 | 0;
      } else {
        i = i + 1 | 0;
        j = 0;
      }
    };
    if (j === lq) {
      return /* true */1;
    } else {
      return /* false */0;
    }
  }
}

exports.makeSuccessJson = makeSuccessJson;
exports.makeFailureJson = makeFailureJson;
exports.getOpt          = getOpt;
exports.getOptExc       = getOptExc;
exports.getDictString   = getDictString;
exports.getDictNumber   = getDictNumber;
exports.getDictObject   = getDictObject;
exports.str             = str;
exports.listToElement   = listToElement;
exports.contains        = contains;
/* No side effect */
