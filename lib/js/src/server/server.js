// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List            = require("bs-platform/lib/js/list.js");
var $$Array         = require("bs-platform/lib/js/array.js");
var Utils           = require("../utils/utils.js");
var Express         = require("bs-express/lib/js/src/express.js");
var Express$1       = require("express");
var Pervasives      = require("bs-platform/lib/js/pervasives.js");
var Caml_format     = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var app = Express.express(/* () */0);


var bodyParser = require('body-parser');
app.use(bodyParser.json());

;

var companies = [/* :: */[
    /* record */[
      /* name */"SoftwareMill",
      /* employees : :: */[
        /* record */[
          /* firstName */"Daniel",
          /* lastName */"Kos",
          /* birthday */"1979-08-16",
          /* salary */1000.0
        ],
        /* :: */[
          /* record */[
            /* firstName */"Zenon",
            /* lastName */"Gamonski",
            /* birthday */"1943-06-16",
            /* salary */1200.0
          ],
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* record */[
        /* name */"UnsafeCode",
        /* employees : :: */[
          /* record */[
            /* firstName */"Jack",
            /* lastName */"Strong",
            /* birthday */"1987-01-15",
            /* salary */5000.0
          ],
          /* :: */[
            /* record */[
              /* firstName */"Jack",
              /* lastName */"Weak",
              /* birthday */"1983-05-10",
              /* salary */6000.0
            ],
            /* [] */0
          ]
        ]
      ],
      /* [] */0
    ]
  ]];

var $$__dirname = typeof (__dirname) === "undefined" ? undefined : (__dirname);

var $$__dirname$1 = $$__dirname === undefined ? /* None */0 : [$$__dirname];

console.log("Current directory: " + Utils.getOpt(/* tuple */[
          $$__dirname$1,
          "-"
        ]));

var Response_ = /* module */[];

function employeeToJson(e) {
  var json = { };
  json["firstName"] = e[/* firstName */0];
  json["lastName"] = e[/* lastName */1];
  json["birthday"] = e[/* birthday */2];
  json["salary"] = e[/* salary */3];
  return json;
}

function employeesToJson(employees) {
  return $$Array.map(employeeToJson, $$Array.of_list(employees));
}

function companyToJson(c) {
  var jsonEmployees = employeesToJson(c[/* employees */1]);
  var json = { };
  json["name"] = c[/* name */0];
  json["employees"] = jsonEmployees;
  return json;
}

function setRespHeaders(res) {
  res.setHeader("Content-Type", "application/json");
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, PATCH, DELETE");
  res.setHeader("Access-Control-Allow-Headers", "X-Requested-With,content-type");
  return /* () */0;
}

var CompanyNotFound = Caml_exceptions.create("Server.CompanyNotFound");

var NameFieldMissing = Caml_exceptions.create("Server.NameFieldMissing");

var QueryFieldMissing = Caml_exceptions.create("Server.QueryFieldMissing");

var EmployeeFieldMissig = Caml_exceptions.create("Server.EmployeeFieldMissig");

function getBody(param) {
  var body = param[0];
  if (body) {
    return Utils.getDictString(body[0], param[1]);
  } else {
    return /* None */0;
  }
}

app.get("/companies", (function (_, res, _$1) {
        var jsonCompanies = $$Array.map((function (c) {
                return c[/* name */0];
              }), $$Array.of_list(companies[0]));
        setRespHeaders(res);
        return res.json(jsonCompanies);
      }));

app.get("/employees", (function (req, res, _) {
        var reqData = req.query;
        var name = Utils.getOptExc(/* tuple */[
              Utils.getDictString(reqData, "name"),
              NameFieldMissing
            ]);
        var cmps = List.filter((function (c) {
                  return +(c[/* name */0] === name);
                }))(companies[0]);
        if (!List.length(cmps)) {
          throw CompanyNotFound;
        }
        var company = List.hd(cmps);
        var jsonEmployees = employeesToJson(company[/* employees */1]);
        setRespHeaders(res);
        return res.json(jsonEmployees);
      }));

app.get("/search", (function (req, res, _) {
        var query = Utils.getOptExc(/* tuple */[
              Utils.getDictString(req.query, "query"),
              QueryFieldMissing
            ]);
        var names = List.flatten(List.map((function (c) {
                    return List.map((function (e) {
                                  return c[/* name */0] + (" " + (e[/* firstName */0] + (" " + e[/* lastName */1])));
                                }), c[/* employees */1]);
                  }), companies[0]));
        List.iter((function (s) {
                console.log(s);
                return /* () */0;
              }), names);
        var jsonResults = $$Array.map((function (name) {
                return name;
              }), $$Array.of_list(List.filter((function (name) {
                          return Utils.contains(/* tuple */[
                                      name,
                                      query
                                    ]);
                        }))(names)));
        setRespHeaders(res);
        return res.json(jsonResults);
      }));

app.post("/companies", (function (req, res, _) {
        var name = Utils.getDictString(req.query, "name");
        var defaultName = "Company " + Pervasives.string_of_int(List.length(companies[0]) + 1 | 0);
        companies[0] = Pervasives.$at(/* :: */[
              /* record */[
                /* name */Utils.getOpt(/* tuple */[
                      name,
                      defaultName
                    ]),
                /* employees : [] */0
              ],
              /* [] */0
            ], companies[0]);
        return res.json(Utils.makeSuccessJson(/* () */0));
      }));

app.post("/employees", (function (req, res, _) {
        var body = Utils.getDictObject(req, "body");
        try {
          var name = Utils.getOptExc(/* tuple */[
                getBody(/* tuple */[
                      body,
                      "name"
                    ]),
                CompanyNotFound
              ]);
          var firstName = Utils.getOptExc(/* tuple */[
                getBody(/* tuple */[
                      body,
                      "firstName"
                    ]),
                EmployeeFieldMissig
              ]);
          var lastName = Utils.getOptExc(/* tuple */[
                getBody(/* tuple */[
                      body,
                      "lastName"
                    ]),
                EmployeeFieldMissig
              ]);
          var birthday = Utils.getOptExc(/* tuple */[
                getBody(/* tuple */[
                      body,
                      "birthday"
                    ]),
                EmployeeFieldMissig
              ]);
          var salary = Utils.getOpt(/* tuple */[
                getBody(/* tuple */[
                      body,
                      "salary"
                    ]),
                "0.0"
              ]);
          var company = List.find((function (c) {
                  return +(c[/* name */0] === name);
                }), companies[0]);
          companies[0] = List.map((function (c) {
                  var match = +(c[/* name */0] === name);
                  if (match !== 0) {
                    return /* record */[
                            /* name */company[/* name */0],
                            /* employees */Pervasives.$at(company[/* employees */1], /* :: */[
                                  /* record */[
                                    /* firstName */firstName,
                                    /* lastName */lastName,
                                    /* birthday */birthday,
                                    /* salary */Caml_format.caml_float_of_string(salary)
                                  ],
                                  /* [] */0
                                ])
                          ];
                  } else {
                    return c;
                  }
                }), companies[0]);
          return res.json(Utils.makeSuccessJson(/* () */0));
        }
        catch (exn){
          if (exn === CompanyNotFound) {
            return res.json(Utils.makeFailureJson("Company name was not found"));
          } else if (exn === EmployeeFieldMissig) {
            return res.json(Utils.makeFailureJson("One of required employee fields is missing"));
          } else {
            throw exn;
          }
        }
      }));

var statics = Utils.getOpt(/* tuple */[
      $$__dirname$1,
      "/"
    ]);

var options = Express.Static[/* defaultOptions */0](/* () */0);

app.use(statics, Express$1.static("static", options));

Express.App[/* listen */0](app, /* Some */[3000], /* None */0, /* () */0);

exports.app                 = app;
exports.companies           = companies;
exports.$$__dirname         = $$__dirname$1;
exports.Response_           = Response_;
exports.employeeToJson      = employeeToJson;
exports.employeesToJson     = employeesToJson;
exports.companyToJson       = companyToJson;
exports.setRespHeaders      = setRespHeaders;
exports.CompanyNotFound     = CompanyNotFound;
exports.NameFieldMissing    = NameFieldMissing;
exports.QueryFieldMissing   = QueryFieldMissing;
exports.EmployeeFieldMissig = EmployeeFieldMissig;
exports.getBody             = getBody;
exports.statics             = statics;
/* app Not a pure module */
